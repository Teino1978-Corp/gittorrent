#summary Protocol design of the Mirror Sync Protocol

= Introduction =

This protocol was designed to be a stripped-down version of the GitTorrent protocol, instead of basing its core design on the binary BitTorrent protocol it is designed to fit cleanly into git.  Some of the core concepts - in particular, the design for dividing pushed and pulled packs into roughly equal sections - will be carried over.  But it will look very different to BitTorrent by the end of this.

This page is essentially copying all of the details from
http://utsl.gen.nz/talks/gittorrent/slide12.html - until this page is finished you can read there.

= Key Mirror Sync Protocol Messages =

The entire Torrent process was broken down into these three parts.  In git development fashion each of which are to be evaluated and implemented independently and each one incrementally adds benefits.  The result is hopefully something with all the features of BitTorrent and none of teh suk.

  * Mirror List - "get me a list of current mirrors, and tell me the latest 'ref'"
  * Mirror Notify - "FYI, I'm mirroring repository X at location Y.  HAND!"
  * Mirror Sync - "Oh hai, can you hand me a slice of git pack?  And want any of mine?"

== Mirror List ==

Example request (for brevity, the vhost part of the request has not been included)

{{{
mirror-list /pub/scm/linux/kernel/git/torvalds/linux-2.6.git
}}}

The response to this might be;

{{{ 
auth refs/* 82312e41472b5f8d86e36e30fc06408866b25843
latest f1d2d2f924e986ac86fdf7b36c94bcdf32beec15
try git://repo.or.cz/linux-2.6 86400 current
try http://git.utsl.gen.nz/mirror/repo.or.cz/linux-2.6 3600 current
try git://214.23.35.210/ 86400 partial
}}}

To disect and explain that;

  * The "latest" part is the SHA1 of the current packed-refs file which represents the result of the most current push to this repository; to be useful, we also need to be able to retrieve the packed-refs file in question.  Currently this was designed to be encapsulated in a git tag object, to allow for comments and PGP signatures without more infrastructure.
  * The `auth refs/* 823..66b25843` part is saying that "if you see a packed-refs/tag object signed by key ID 66b25843, and it changes references matching refs/, it's valid." - there's a slight security flaw with issuing authorization like this over an unauthenticated channel; my current thoughts are that the web of trust and saving known keys like ssh does will make this not a real issue.
  * All of the "try" lines are mirrors; the master server may or may not have already confirmed that they work.  The times after the URL represent the TTL of this mirror line, and the final word represents whether or not when it was last checked that this mirror was up to date or not.